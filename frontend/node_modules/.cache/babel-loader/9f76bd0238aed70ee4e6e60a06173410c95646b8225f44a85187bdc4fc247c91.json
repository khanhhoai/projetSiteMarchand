{"ast":null,"code":"// import { createContext, useEffect, useState } from \"react\";\n// import { PRODUCTS } from \"../products\";\n\n// export const ShopContext = createContext(null);\n\n// const getDefaultCart = () => {\n//   let cart = {};\n//   for (let i = 1; i < PRODUCTS.length + 1; i++) {\n//     cart[i] = 0;\n//   }\n//   return cart;\n// };\n\n// export const ShopContextProvider = (props) => {\n//   const [cartItems, setCartItems] = useState(getDefaultCart());\n\n//   const getTotalCartAmount = () => {\n//     let totalAmount = 0;\n//     for (const item in cartItems) {\n//       if (cartItems[item] > 0) {\n//         let itemInfo = PRODUCTS.find((product) => product.id === Number(item));\n//         totalAmount += cartItems[item] * itemInfo.price;\n//       }\n//     }\n//     return totalAmount;\n//   };\n\n//   const addToCart = (itemId) => {\n//     setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] + 1 }));\n//   };\n\n//   const removeFromCart = (itemId) => {\n//     setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\n//   };\n\n//   const updateCartItemCount = (newAmount, itemId) => {\n//     setCartItems((prev) => ({ ...prev, [itemId]: newAmount }));\n//   };\n\n//   const checkout = () => {\n//     setCartItems(getDefaultCart());\n//   };\n\n//   const reserveOrder = () => {\n//     const reservedOrder = {\n//       id: Date.now(),\n//       items: cartItems,\n//       date: new Date().toISOString(),\n//       status: \"Reserved\",\n//     };\n\n//     console.log(\"Order Reserved:\", reservedOrder);\n\n//     // Clear the cart after reservation\n//     setCartItems(getDefaultCart());\n//   };\n\n//   const contextValue = {\n//     cartItems,\n//     addToCart,\n//     updateCartItemCount,\n//     removeFromCart,\n//     getTotalCartAmount,\n//     checkout,\n//     reserveOrder,\n//   };\n\n//   return (\n//     <ShopContext.Provider value={contextValue}>\n//       {props.children}\n//     </ShopContext.Provider>\n//   );\n// };","map":{"version":3,"names":[],"sources":["D:/STI 5A/Semestre 9/ASL/web avance/ProjectMarchand/frontend/src/context/shop-context.jsx"],"sourcesContent":["// import { createContext, useEffect, useState } from \"react\";\r\n// import { PRODUCTS } from \"../products\";\r\n\r\n// export const ShopContext = createContext(null);\r\n\r\n// const getDefaultCart = () => {\r\n//   let cart = {};\r\n//   for (let i = 1; i < PRODUCTS.length + 1; i++) {\r\n//     cart[i] = 0;\r\n//   }\r\n//   return cart;\r\n// };\r\n\r\n// export const ShopContextProvider = (props) => {\r\n//   const [cartItems, setCartItems] = useState(getDefaultCart());\r\n\r\n//   const getTotalCartAmount = () => {\r\n//     let totalAmount = 0;\r\n//     for (const item in cartItems) {\r\n//       if (cartItems[item] > 0) {\r\n//         let itemInfo = PRODUCTS.find((product) => product.id === Number(item));\r\n//         totalAmount += cartItems[item] * itemInfo.price;\r\n//       }\r\n//     }\r\n//     return totalAmount;\r\n//   };\r\n\r\n//   const addToCart = (itemId) => {\r\n//     setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] + 1 }));\r\n//   };\r\n\r\n//   const removeFromCart = (itemId) => {\r\n//     setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\r\n//   };\r\n\r\n//   const updateCartItemCount = (newAmount, itemId) => {\r\n//     setCartItems((prev) => ({ ...prev, [itemId]: newAmount }));\r\n//   };\r\n\r\n//   const checkout = () => {\r\n//     setCartItems(getDefaultCart());\r\n//   };\r\n\r\n//   const reserveOrder = () => {\r\n//     const reservedOrder = {\r\n//       id: Date.now(),\r\n//       items: cartItems,\r\n//       date: new Date().toISOString(),\r\n//       status: \"Reserved\",\r\n//     };\r\n  \r\n//     console.log(\"Order Reserved:\", reservedOrder);\r\n  \r\n//     // Clear the cart after reservation\r\n//     setCartItems(getDefaultCart());\r\n//   };\r\n  \r\n//   const contextValue = {\r\n//     cartItems,\r\n//     addToCart,\r\n//     updateCartItemCount,\r\n//     removeFromCart,\r\n//     getTotalCartAmount,\r\n//     checkout,\r\n//     reserveOrder,\r\n//   };\r\n\r\n//   return (\r\n//     <ShopContext.Provider value={contextValue}>\r\n//       {props.children}\r\n//     </ShopContext.Provider>\r\n//   );\r\n// };\r\n\r\n"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}